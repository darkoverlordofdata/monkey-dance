/**
 * Entitas Generated Extensions for monkeydance
 *
 * do not edit this file
 */
(function(){
  var Pool = entitas.Pool;
  var Matcher = entitas.Matcher;
  var Entity = entitas.Entity;
  var Matcher = entitas.Matcher;
  var MovableComponent = monkeydance.MovableComponent;
  var PositionComponent = monkeydance.PositionComponent;
  var DestroyComponent = monkeydance.DestroyComponent;
  var InputComponent = monkeydance.InputComponent;
  var InteractiveComponent = monkeydance.InteractiveComponent;
  var ResourceComponent = monkeydance.ResourceComponent;
  var ViewComponent = monkeydance.ViewComponent;
  var ScoreComponent = monkeydance.ScoreComponent;
  var CoreComponentIds = monkeydance.CoreComponentIds;
  Entity.movableComponent = new MovableComponent();
  Object.defineProperty(Entity.prototype, 'isMovable', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Movable);
    },
    set: function(value) {
      if (value !== this.isMovable) {
        if (value) {
          this.addComponent(CoreComponentIds.Movable, Entity.movableComponent);
        } else {
          this.removeComponent(CoreComponentIds.Movable);
        }
      }
    }
  });
  Entity.prototype.setMovable = function(value) {
    this.isMovable = value;
    return this;
  };
  Entity._positionComponentPool = [];
  Entity.clearPositionComponentPool = function() {
    Entity._positionComponentPool.length = 0;
  };
  Object.defineProperty(Entity.prototype, 'position', {
    get: function() {
      return this.getComponent(CoreComponentIds.Position);
    }
  });
  Object.defineProperty(Entity.prototype, 'hasPosition', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Position);
    }
  });
  Entity.prototype.addPosition = function(x, y) {
    var component = Entity._positionComponentPool.length > 0 ? Entity._positionComponentPool.pop() : new PositionComponent();
    component.x = x;
    component.y = y;
    return this.addComponent(CoreComponentIds.Position, component);
  };
  Entity.prototype.replacePosition = function(x, y) {
    var previousComponent = this.hasPosition ? this.position : null;
    var component = Entity._positionComponentPool.length > 0 ? Entity._positionComponentPool.pop() : new PositionComponent();
    component.x = x;
    component.y = y;
    this.replaceComponent(CoreComponentIds.Position, component);
    if (previousComponent != null) {
      Entity._positionComponentPool.push(previousComponent);
    }
    return this;
  };
  Entity.prototype.removePosition = function() {
    var component = this.position;
    this.removeComponent(CoreComponentIds.Position);
    Entity._positionComponentPool.push(component);
    return this;
  };
  Entity.destroyComponent = new DestroyComponent();
  Object.defineProperty(Entity.prototype, 'isDestroy', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Destroy);
    },
    set: function(value) {
      if (value !== this.isDestroy) {
        if (value) {
          this.addComponent(CoreComponentIds.Destroy, Entity.destroyComponent);
        } else {
          this.removeComponent(CoreComponentIds.Destroy);
        }
      }
    }
  });
  Entity.prototype.setDestroy = function(value) {
    this.isDestroy = value;
    return this;
  };
  Entity._inputComponentPool = [];
  Entity.clearInputComponentPool = function() {
    Entity._inputComponentPool.length = 0;
  };
  Object.defineProperty(Entity.prototype, 'input', {
    get: function() {
      return this.getComponent(CoreComponentIds.Input);
    }
  });
  Object.defineProperty(Entity.prototype, 'hasInput', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Input);
    }
  });
  Entity.prototype.addInput = function(x, y) {
    var component = Entity._inputComponentPool.length > 0 ? Entity._inputComponentPool.pop() : new InputComponent();
    component.x = x;
    component.y = y;
    return this.addComponent(CoreComponentIds.Input, component);
  };
  Entity.prototype.replaceInput = function(x, y) {
    var previousComponent = this.hasInput ? this.input : null;
    var component = Entity._inputComponentPool.length > 0 ? Entity._inputComponentPool.pop() : new InputComponent();
    component.x = x;
    component.y = y;
    this.replaceComponent(CoreComponentIds.Input, component);
    if (previousComponent != null) {
      Entity._inputComponentPool.push(previousComponent);
    }
    return this;
  };
  Entity.prototype.removeInput = function() {
    var component = this.input;
    this.removeComponent(CoreComponentIds.Input);
    Entity._inputComponentPool.push(component);
    return this;
  };
  Entity.interactiveComponent = new InteractiveComponent();
  Object.defineProperty(Entity.prototype, 'isInteractive', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Interactive);
    },
    set: function(value) {
      if (value !== this.isInteractive) {
        if (value) {
          this.addComponent(CoreComponentIds.Interactive, Entity.interactiveComponent);
        } else {
          this.removeComponent(CoreComponentIds.Interactive);
        }
      }
    }
  });
  Entity.prototype.setInteractive = function(value) {
    this.isInteractive = value;
    return this;
  };
  Entity._resourceComponentPool = [];
  Entity.clearResourceComponentPool = function() {
    Entity._resourceComponentPool.length = 0;
  };
  Object.defineProperty(Entity.prototype, 'resource', {
    get: function() {
      return this.getComponent(CoreComponentIds.Resource);
    }
  });
  Object.defineProperty(Entity.prototype, 'hasResource', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Resource);
    }
  });
  Entity.prototype.addResource = function(name) {
    var component = Entity._resourceComponentPool.length > 0 ? Entity._resourceComponentPool.pop() : new ResourceComponent();
    component.name = name;
    return this.addComponent(CoreComponentIds.Resource, component);
  };
  Entity.prototype.replaceResource = function(name) {
    var previousComponent = this.hasResource ? this.resource : null;
    var component = Entity._resourceComponentPool.length > 0 ? Entity._resourceComponentPool.pop() : new ResourceComponent();
    component.name = name;
    this.replaceComponent(CoreComponentIds.Resource, component);
    if (previousComponent != null) {
      Entity._resourceComponentPool.push(previousComponent);
    }
    return this;
  };
  Entity.prototype.removeResource = function() {
    var component = this.resource;
    this.removeComponent(CoreComponentIds.Resource);
    Entity._resourceComponentPool.push(component);
    return this;
  };
  Entity._viewComponentPool = [];
  Entity.clearViewComponentPool = function() {
    Entity._viewComponentPool.length = 0;
  };
  Object.defineProperty(Entity.prototype, 'view', {
    get: function() {
      return this.getComponent(CoreComponentIds.View);
    }
  });
  Object.defineProperty(Entity.prototype, 'hasView', {
    get: function() {
      return this.hasComponent(CoreComponentIds.View);
    }
  });
  Entity.prototype.addView = function(sprite) {
    var component = Entity._viewComponentPool.length > 0 ? Entity._viewComponentPool.pop() : new ViewComponent();
    component.sprite = sprite;
    return this.addComponent(CoreComponentIds.View, component);
  };
  Entity.prototype.replaceView = function(sprite) {
    var previousComponent = this.hasView ? this.view : null;
    var component = Entity._viewComponentPool.length > 0 ? Entity._viewComponentPool.pop() : new ViewComponent();
    component.sprite = sprite;
    this.replaceComponent(CoreComponentIds.View, component);
    if (previousComponent != null) {
      Entity._viewComponentPool.push(previousComponent);
    }
    return this;
  };
  Entity.prototype.removeView = function() {
    var component = this.view;
    this.removeComponent(CoreComponentIds.View);
    Entity._viewComponentPool.push(component);
    return this;
  };
  Entity._scoreComponentPool = [];
  Entity.clearScoreComponentPool = function() {
    Entity._scoreComponentPool.length = 0;
  };
  Object.defineProperty(Entity.prototype, 'score', {
    get: function() {
      return this.getComponent(CoreComponentIds.Score);
    }
  });
  Object.defineProperty(Entity.prototype, 'hasScore', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Score);
    }
  });
  Entity.prototype.addScore = function(value) {
    var component = Entity._scoreComponentPool.length > 0 ? Entity._scoreComponentPool.pop() : new ScoreComponent();
    component.value = value;
    return this.addComponent(CoreComponentIds.Score, component);
  };
  Entity.prototype.replaceScore = function(value) {
    var previousComponent = this.hasScore ? this.score : null;
    var component = Entity._scoreComponentPool.length > 0 ? Entity._scoreComponentPool.pop() : new ScoreComponent();
    component.value = value;
    this.replaceComponent(CoreComponentIds.Score, component);
    if (previousComponent != null) {
      Entity._scoreComponentPool.push(previousComponent);
    }
    return this;
  };
  Entity.prototype.removeScore = function() {
    var component = this.score;
    this.removeComponent(CoreComponentIds.Score);
    Entity._scoreComponentPool.push(component);
    return this;
  };
  Matcher._matcherMovable=null;
  
  Object.defineProperty(Matcher, 'Movable', {
    get: function() {
      if (Matcher._matcherMovable == null) {
        Matcher._matcherMovable = Matcher.allOf(CoreComponentIds.Movable);
      }
      
      return Matcher._matcherMovable;
    }
  });
  Matcher._matcherPosition=null;
  
  Object.defineProperty(Matcher, 'Position', {
    get: function() {
      if (Matcher._matcherPosition == null) {
        Matcher._matcherPosition = Matcher.allOf(CoreComponentIds.Position);
      }
      
      return Matcher._matcherPosition;
    }
  });
  Matcher._matcherDestroy=null;
  
  Object.defineProperty(Matcher, 'Destroy', {
    get: function() {
      if (Matcher._matcherDestroy == null) {
        Matcher._matcherDestroy = Matcher.allOf(CoreComponentIds.Destroy);
      }
      
      return Matcher._matcherDestroy;
    }
  });
  Matcher._matcherInput=null;
  
  Object.defineProperty(Matcher, 'Input', {
    get: function() {
      if (Matcher._matcherInput == null) {
        Matcher._matcherInput = Matcher.allOf(CoreComponentIds.Input);
      }
      
      return Matcher._matcherInput;
    }
  });
  Matcher._matcherInteractive=null;
  
  Object.defineProperty(Matcher, 'Interactive', {
    get: function() {
      if (Matcher._matcherInteractive == null) {
        Matcher._matcherInteractive = Matcher.allOf(CoreComponentIds.Interactive);
      }
      
      return Matcher._matcherInteractive;
    }
  });
  Matcher._matcherResource=null;
  
  Object.defineProperty(Matcher, 'Resource', {
    get: function() {
      if (Matcher._matcherResource == null) {
        Matcher._matcherResource = Matcher.allOf(CoreComponentIds.Resource);
      }
      
      return Matcher._matcherResource;
    }
  });
  Matcher._matcherView=null;
  
  Object.defineProperty(Matcher, 'View', {
    get: function() {
      if (Matcher._matcherView == null) {
        Matcher._matcherView = Matcher.allOf(CoreComponentIds.View);
      }
      
      return Matcher._matcherView;
    }
  });
  Matcher._matcherScore=null;
  
  Object.defineProperty(Matcher, 'Score', {
    get: function() {
      if (Matcher._matcherScore == null) {
        Matcher._matcherScore = Matcher.allOf(CoreComponentIds.Score);
      }
      
      return Matcher._matcherScore;
    }
  });
  Object.defineProperty(Pool.prototype, 'scoreEntity', {
    get: function() {
      return this.getGroup(Matcher.Score).getSingleEntity();
    }
  });
  Object.defineProperty(Pool.prototype, 'score', {
    get: function() {
      return this.scoreEntity.score;
    }
  });
  Object.defineProperty(Pool.prototype, 'hasScore', {
    get: function() {
      return this.scoreEntity != undefined;
    }
  });
  Pool.prototype.setScore = function(value) {
    if (this.hasScore) {
      throw new SingleEntityException(Matcher.Score);
    }
    var entity = this.createEntity();
    entity.addScore(value);
    return entity;
  };
  Pool.prototype.replaceScore = function(value) {
    var entity = this.scoreEntity;
    if (entity == null) {
      entity = this.setScore(value);
    } else {
      entity.replaceScore(value);
    }
    return entity;
  };
  Pool.prototype.removeScore = function() {
    this.destroyEntity(scoreEntity);
  };
})();